{"version":3,"file":"index.js","sources":["../../server/src/pluginId.ts","../../server/src/utils.ts","../../server/src/bootstrap.ts","../../server/src/register.ts","../../server/src/config/index.ts","../../server/src/services/placeholder.ts","../../server/src/services/minio.ts","../../server/src/services/settings.ts","../../server/src/services/index.ts","../../server/src/index.ts"],"sourcesContent":["export const PLUGIN_ID = 'strapi-plugin-placeholder';\n","import mimeTypes from 'mime-types';\nimport { PLUGIN_ID } from './pluginId';\nimport { PluginServices } from './services';\nimport { Core } from '@strapi/strapi';\n\nconst canGeneratePlaceholder = (file) => {\n  if (!file.mime) {\n    // Only lookup the mime if file lacks the prop.\n    const lookedUpMime = mimeTypes.lookup(file.name);\n    if (lookedUpMime) {\n      // lookedUpMime can return false if it failed to match\n      file.mime = lookedUpMime;\n    }\n  }\n\n  return file.mime?.startsWith('image/') && file.url;\n};\n\nconst getService = <ServiceName extends keyof PluginServices>(\n  strapi: Core.Strapi,\n  serviceName: ServiceName\n): PluginServices[ServiceName] => {\n  return strapi.plugin(PLUGIN_ID).service(serviceName);\n};\n\nexport { canGeneratePlaceholder, getService };\n","import type { Core } from '@strapi/strapi';\nimport { canGeneratePlaceholder, getService } from './utils';\n\nconst bootstrap = ({ strapi }: { strapi: Core.Strapi }) => {\n  const generatePlaceholder = async (event) => {\n    const { data, where } = event.params;\n\n    if (!data.url || !data.mime || !data.hash || !data.ext) {\n      // If the returned data is missing a url or mime property (probably because we're doing an update)\n      // then we'll need to pull these values from the upload.file plugin and merge them in.\n      const file = await strapi.documents('plugin::upload.file').findOne(where.id);\n      data.url = data.url ?? file.url;\n      data.mime = data.mime ?? file.mime;\n      data.hash = data.hash ?? file.hash;\n      data.ext = data.ext ?? file.ext;\n    }\n\n    if (!canGeneratePlaceholder(data)) return;\n    data.placeholder = await getService(strapi, 'placeholder').generate({\n      hash: data.hash,\n      ext: data.ext,\n      url: data.url,\n      provider: data.provider,\n    });\n  };\n\n  strapi.db.lifecycles.subscribe({\n    models: ['plugin::upload.file'],\n    beforeCreate: generatePlaceholder,\n    beforeUpdate: generatePlaceholder,\n  });\n};\n\nexport default bootstrap;\n","import type { Core } from '@strapi/strapi';\n\nconst register = ({ strapi }: { strapi: Core.Strapi }) => {\n  if (!strapi.plugin('upload'))\n    return strapi.log.warn(\"Upload plugin is not installed, Plaiceholder won't be started.\");\n\n  /* Update the Media Library File content type, adding the placeholder field */\n  // @ts-ignore\n  strapi.plugin('upload').contentTypes.file.attributes.placeholder = {\n    type: 'text',\n  };\n};\n\nexport default register;\n","export default {\n  default: {},\n  validator() {},\n};\n","import { getPlaiceholder } from 'plaiceholder';\nimport { getService } from '../utils';\nimport type { Core } from '@strapi/strapi';\n\nconst placeholder = ({ strapi }: { strapi: Core.Strapi }) => {\n  return {\n    async generate({\n      hash,\n      ext,\n      url,\n      provider,\n    }: {\n      hash: string;\n      ext: string;\n      url: string;\n      provider: string;\n    }): Promise<string | null> {\n      try {\n        const settings = getService(strapi, 'settings').get();\n        let imageUrl = url;\n\n        if (provider === 'aws-s3') {\n          const objectName = `${hash}${ext}`;\n          imageUrl = await getService(strapi, 'minio').get({ settings, objectName });\n          if (!imageUrl) return null;\n        } else if (provider !== 'local') {\n          strapi.log.warn(`Provider \"${provider}\" is not supported by the placeholder service.`);\n          return null;\n        }\n\n        const { base64 } = await getPlaiceholder(imageUrl, settings);\n        return base64;\n      } catch (error) {\n        strapi.log.error(error);\n        return null;\n      }\n    },\n  };\n};\n\nexport default placeholder;\n","import AWS from 'aws-sdk';\n\nconst minio = () => ({\n  async get({ settings, objectName }) {\n    const s3 = new AWS.S3({\n      endpoint: settings.endpoint,\n      credentials: {\n        accessKeyId: settings.accessKey,\n        secretAccessKey: settings.secretKey,\n      },\n      s3ForcePathStyle: true,\n    });\n    return s3.getSignedUrl('getObject', {\n      Bucket: settings.bucket,\n      Key: objectName,\n      Expires: 15 * 60,\n    });\n  },\n});\n\nexport default minio;\n","import { PLUGIN_ID } from '../pluginId';\nimport type { Core } from '@strapi/strapi';\n\nconst settings = ({ strapi }: { strapi: Core.Strapi }) => ({\n  /**\n   * Helper that returns the plugin settings.\n   * @returns {Object} the settings of the plugin\n   */\n\n  get: (): object => strapi.config.get(`plugin::${PLUGIN_ID}`),\n\n  /**\n   * Helper that sets the plugin settings and returns them.\n   * @param {Object} settings the desired settings for the plugin\n   * @param {number} settings.size the desired size of the placeholder\n   * @returns {Object} the new settings for the plugin\n   */\n\n  set: (settings: { size: number }): object => strapi.config.set(`plugin::${PLUGIN_ID}`, settings),\n});\n\nexport default settings;\n","import placeholder from './placeholder';\nimport minio from './minio';\nimport settings from './settings';\n\nconst services = {\n  placeholder,\n  minio,\n  settings,\n};\n\nexport type PluginServices = {\n  [key in keyof typeof services]: ReturnType<(typeof services)[key]>;\n};\nexport default services;\n","/**\n * Application methods\n */\nimport bootstrap from './bootstrap';\nimport register from './register';\n\n/**\n * Plugin server methods\n */\nimport config from './config';\nimport services from './services';\n\nexport default {\n  register,\n  bootstrap,\n  config,\n  services,\n};\n"],"names":["mimeTypes","settings","getPlaiceholder","AWS"],"mappings":"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"}