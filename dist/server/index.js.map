{"version":3,"file":"index.js","sources":["../../server/src/plugin-id.js","../../server/src/utils.js","../../server/src/bootstrap.js","../../server/src/register.js","../../server/src/config/schema.js","../../server/src/config/index.js","../../server/src/services/placeholder.js","../../server/src/services/settings.js","../../server/src/services/index.js","../../server/src/index.js"],"sourcesContent":["'use strict';\n\nconst packageDefinition = require('../../package.json');\n\nmodule.exports = packageDefinition.strapi.name;\n","'use strict';\n\nconst pluginId = require('./plugin-id');\nconst mimeTypes = require('mime-types');\n\n/**\n * Checks whether the passed file has a MIME type that is supported by the plugin, hence whether a placeholder can be generated.\n * @param {string} file the file we want to generate a placeholder for\n * @returns {boolean} whether a placeholder can be generated for the given file\n */\n\nconst canGeneratePlaceholder = (file) => {\n  if (!file.mime) {\n    // Only lookup the mime if file lacks the prop.\n    const lookedUpMime = mimeTypes.lookup(file.name);\n    if (lookedUpMime) {\n      // lookedUpMime can return false if it failed to match\n      file.mime = lookedUpMime;\n    }\n  }\n\n  return file.mime?.startsWith('image/') && file.url;\n};\n\n/**\n * Helper that retrieves one of the available services of this plugin from Strapi.\n * @param {*} strapi the Strapi instance\n * @param {*} service the name of the service to retrieve\n * @returns the service\n */\nconst getService = (strapi, service) => strapi.plugin(pluginId).service(service);\n\nmodule.exports = {\n  canGeneratePlaceholder,\n  getService,\n};\n","'use strict';\n\nconst { getService, canGeneratePlaceholder } = require('./utils');\n\nmodule.exports = ({ strapi }) => {\n  /* Generate a placeholder when a new image is uploaded or updates */\n\n  const generatePlaceholder = async (event) => {\n    const { data, where } = event.params;\n\n    if (!data.url || !data.mime) {\n      // If the returned data is missing a url or mime property (probably because we're doing an update)\n      // then we'll need to pull these values from the upload.file plugin and merge them in.\n      const file = await strapi.entityService.findOne('plugin::upload.file', where.id);\n      data.url = data.url ?? file.url;\n      data.mime = data.mime ?? file.mime;\n    }\n\n    if (!canGeneratePlaceholder(data)) return;\n    data.placeholder = await getService(strapi, 'placeholder').generate(data.url);\n  };\n\n  strapi.db.lifecycles.subscribe({\n    models: ['plugin::upload.file'],\n    beforeCreate: generatePlaceholder,\n    beforeUpdate: generatePlaceholder,\n  });\n};\n","'use strict';\n\nmodule.exports = ({ strapi }) => {\n  if (!strapi.plugin('upload'))\n    return strapi.log.warn(\"Upload plugin is not installed, Plaiceholder won't be started.\");\n\n  /* Update the Media Library File content type, adding the placeholder field */\n  strapi.plugin('upload').contentTypes.file.attributes.placeholder = {\n    type: 'text',\n  };\n};\n","'use strict';\n\nconst yup = require('yup');\n\nmodule.exports = yup.object().shape({\n  size: yup.number().min(4).max(64),\n});\n","'use strict';\n\nconst schema = require('./schema');\n\nmodule.exports = {\n  default: () => ({}),\n  validator: async (config) => schema.validate(config),\n};\n","'use strict';\n\nconst { getPlaiceholder } = require('plaiceholder');\nconst { getService } = require('../utils');\n\nmodule.exports = ({ strapi }) => ({\n  /**\n   * Generates a base64 placeholder image for the given image.\n   * @param {string} url a local or remote image URL to generate a placeholder for\n   * @returns {Promise<string>} a base64 encoded placeholder image\n   */\n\n  async generate(url) {\n    try {\n      const settings = getService(strapi, 'settings').get();\n      const { base64 } = await getPlaiceholder(url, settings);\n      return base64;\n    } catch (e) {\n      strapi.log.error(e);\n      return null;\n    }\n  },\n});\n","'use strict';\n\nconst pluginId = require('../plugin-id');\n\nmodule.exports = ({ strapi }) => ({\n  /**\n   * Helper that returns the plugin settings.\n   * @returns {Object} the settings of the plugin\n   */\n\n  get: () => strapi.config.get(`plugin.${pluginId}`),\n\n  /**\n   * Helper that sets the plugin settings and returns them.\n   * @param {Object} settings the desired settings for the plugin\n   * @param {number} settings.size the desired size of the placeholder\n   * @returns {Object} the new settings for the plugin\n   */\n\n  set: (settings) => strapi.config.set(`plugin.${pluginId}`, settings),\n});\n","'use strict';\n\nconst placeholder = require('./placeholder');\nconst settings = require('./settings');\n\nmodule.exports = {\n  placeholder,\n  settings,\n};\n","'use strict';\n\nconst bootstrap = require('./bootstrap');\nconst register = require('./register');\nconst config = require('./config');\nconst services = require('./services');\n\nmodule.exports = {\n  bootstrap,\n  register,\n  config,\n  services,\n};\n"],"names":["pluginId","require$$0","require$$1","canGeneratePlaceholder","getService","strapi","bootstrap","register","schema","config","placeholder","settings","services","require$$2","require$$3"],"mappings":"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"}